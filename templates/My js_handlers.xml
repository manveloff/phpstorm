<templateSet group="My js-handlers">
  <template name="save" value="//---------------------------------------//&#10;// s1.1. Сохранить данные на сервер в БД //&#10;//---------------------------------------//&#10;// TODO: изменить имя на актуальное&#10;f.s1.save_data = function(from, data, componentConext, event) {&#10;&#10;  // 1] Завершить, если функция вызвана не действием пользователя&#10;  // - А программно.&#10;  if(event)&#10;    if(!event.originalEvent)&#10;      return;&#10;&#10;&#10;  // 2] Применить &quot;механизм отложенного сохранения для текстовых полей&quot;&#10;  // TODO: изменить имя на актуальное&#10;  if(f.s0.txt_delay_save.use(f.s1.save_data.bind('', from, data, event)))&#10;    return;&#10;&#10;&#10;  // 3] Выполнить специфическую для каждого from работу&#10;&#10;    // TODO: пример&#10;    // 3.1] Если from == &quot;description&quot;&#10;    //if(from == &quot;description&quot;) {&#10;    //&#10;    //  if(self.m.s3.choosen_group().description().length &gt; 5000) {&#10;    //&#10;    //    // Сообщить&#10;    //    notify({msg: 'Описание группы &gt; 5000 символов'});&#10;    //&#10;    //    // Завершить&#10;    //    return;&#10;    //&#10;    //  }&#10;    //&#10;    //}&#10;&#10;&#10;  // 4] Провести валидацию значений всех свойств&#10;&#10;    // TODO: примеры&#10;  &#10;    //  // 4.1] id&#10;    //  // - Должно быть целым, положительным числом&#10;    //  if(!/^[1-9]+[0-9]*$/i.test(self.m.s1.obj.id())) {&#10;    //    notify({msg: 'Недопустимое значение св-ва id', width: '300'});&#10;    //    return;&#10;    //  }&#10;  &#10;    //  // 4.2] name&#10;    //  // - Должно соответствовать ограничениями на имя/название&#10;    //  if(!/^[-0-9а-яёa-z\/\\_!№@#$&amp;:()\[\]{}*%?&quot;'`., ]*$/i.test(self.m.s1.obj.name())) {&#10;    //    notify({msg: 'Недопустимое значение св-ва name', width: '300'});&#10;    //    return;&#10;    //  }&#10;  &#10;    //  // 4.3] description&#10;    //  // - Должно соответствовать ограничениями на текстовое описание&#10;    //  if(!/^[-0-9а-яёa-z\/\\_!№@#$&amp;:()\[\]{}*%?&quot;'`.,\r\n ]*$/i.test(self.m.s1.obj.description())) {&#10;    //    notify({msg: 'Недопустимое значение св-ва description', width: '350'});&#10;    //    return;&#10;    //  }&#10;&#10;&#10;  // 5] Подготовить объект в виде json-строки к отправке на сервер&#10;&#10;    // Подготовить объект&#10;    var o = {};&#10;    o.operation = 5;&#9;&#9;// TODO: указать ID операции&#10;    o.data = {};&#10;&#10;    // Подготовить таймер&#10;    o.data.timestamp = self.m.s0.ajax_timers[o.operation] = Date.now();&#10;&#10;    // Наполнить объект&#10;    // - Имена св-в должны на 100% соответствовать именам столбцов в БД&#10;    // TODO: добавить в data данные для отправки на сервер&#10;    o.data.id &#9;&#9;&#9;&#9;&#9;= self.m.s3.choosen_group().id();&#10;    o.data.name  &#9;&#9;&#9;&#9;= self.m.s3.choosen_group().name();&#10;    o.data.description  = self.m.s3.choosen_group().description();&#10;&#10;    // Получить json-строку&#10;    var json = ko.toJSON(o);&#10;&#10;&#10;  // 6] Показать сообщение&#10;  notify({msg: 'Вношу изменения...', time: '9999'});&#10;&#10;&#10;  // 7] Заблокировать закрытие документа, сделав пометку о наличии не сохранённых данных&#10;  f.s0.txt_delay_save.block();&#10;&#10;&#10;  // 8] Изменить на +1 счётчик ожидающих ответов ajax-запросов&#10;  self.m.s0.ajax_counter(+self.m.s0.ajax_counter() + 1);&#10;&#10;&#10;  // 9] Отправить объект на сервер ajax-запросом&#10;  ajax({&#10;    method: 'post',&#10;    headers: {&quot;Content-Type&quot;: &quot;application/json&quot;, &quot;X-CSRF-TOKEN&quot;: server.csrf_token},&#10;    requestBody: json,&#10;    params: {self: self, o: o, from: from},&#10;&#10;    // Обработка OK-ответа с сервера&#10;    callback: function(xhr, status, event, target, params) {&#10;&#10;      // 1. Получить ответ сервера&#10;      var data = JSON.parse(xhr.responseText);&#10;&#10;      // 2. Изменить на -1 счётчик ожидающих ответов ajax-запросов&#10;      self.m.s0.ajax_counter(+self.m.s0.ajax_counter() - 1);&#10;&#10;      // 3. Если data.timestamp &lt; self.m.s0.ajax_timers[o.operation], завершить&#10;      if(data.timestamp &lt; self.m.s0.ajax_timers[o.operation]) return;&#10;&#10;      // 4. Разблокировать закрытие документа, убрав пометку о наличии не сохранённых данных&#10;      // - Но только, если m.s0.ajax_counter == 0&#10;      if(self.m.s0.ajax_counter() == 0)&#10;        f.s0.txt_delay_save.unblock();&#10;&#10;      // 5. Если data.result == 'success', сообщить об этом&#10;      if(data.result == 'success') {&#10;        &#10;        // TODO: написать код - что будет в случае успешного ответа&#10;        &#10;        &#10;        // Сообщить, об успехе&#10;        // - Но только, если m.s0.ajax_counter == 0&#10;        if(self.m.s0.ajax_counter() == 0)&#10;          notify({msg: 'Изменения успешно внесены'});&#10;&#10;      }&#10;&#10;      // 6. Если data.result != 'success':&#10;      if(data.result == 'fail') {&#10;&#10;        // Сообщить об ошибке&#10;        notify({msg: 'Возникла ошибка', time: 3});&#10;&#10;        // Вывести информацию об ошибках&#10;        // TODO: указать верное сообщение при ошибке&#10;        console.log('При сохранении свойств группы в БД произошла ошибка. Подробнности - в логе.');&#10;&#10;        // Сообщить о неудаче&#10;        notify({msg: 'Операция закончилась неудачей'});&#10;&#10;      }&#10;&#10;    },&#10;&#10;    // Обработка ответа сервера в случае ошибки&#10;    error_callback: function(xhr, status, event, target) {&#10;      console.log(arguments[0].responseText);&#10;    },&#10;&#10;    // Обработка ответа сервера в случае таймаута&#10;    timeout: [100, function(){&#10;      console.log(&quot;Ошибка: timeout 100 секунд&quot;);&#10;    }]&#10;  });&#10;&#10;};" description="Шаблон ajax-функции для сохранения данных на сервер в БД" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSP" value="false" />
    </context>
  </template>
  <template name="update" value="//---------------------------------//&#10;// s1.1. Обновить данные в клиенте //&#10;//---------------------------------//&#9;&#10;// TODO: изменить имя на актуальное&#10;f.s0.update_data = function(from, callback, data, event) {&#10;&#10;&#9;// 1] Завершить, если функция вызвана не действием пользователя&#10;&#9;// - И не определёнными программами.&#10;&#9;// - А программно, прочими программами.&#10;&#9;if(event)&#10;&#9;&#9;if(!event.originalEvent) // &amp;&amp; from != 'pagi_back'   // TODO: указать, с какими from допустимо программное выполнение&#10;&#9;&#9;&#9;return;&#10;&#10;&#10;&#9;// 2] Применить &quot;механизм отложенного сохранения для текстовых полей&quot;&#10;&#9;// TODO: изменить имя на актуальное&#10;&#9;if(f.s0.txt_delay_save.use(f.s0.update_data.bind('', from, callback, data, event)))&#10;&#9;&#9;return;&#10;&#10;&#10;&#9;// 3] Выполнить специфическую для триггера from работу&#10;&#10;&#9;&#9;// TODO: сабж&#10;&#9;&#10;&#10;&#9;// 4] Подготовить объект в виде json-строки к отправке на сервер&#10;&#10;&#9;&#9;// Подготовить объект&#10;&#9;&#9;var o = {};&#10;&#9;&#9;o.operation = 4;&#9;&#9;// TODO: указать ID операции&#10;&#9;&#9;o.data = {};&#10;&#10;&#9;&#9;// Подготовить таймер&#10;&#9;&#9;o.data.timestamp = self.m.s0.ajax_timers[o.operation] = Date.now();&#10;&#10;&#9;&#9;// Наполнить объект&#10;&#9;&#9;// TODO: добавить в data данные для отправки на сервер (в основном, необходимые для фильтрации)&#10;&#9;&#9;&#10;&#9;&#9;&#9;//o.data.from &#9;&#9;&#9;&#9;&#9;&#9;&#9;= from;&#10;&#10;&#9;&#9;// Получить json-строку&#10;&#9;&#9;var json = ko.toJSON(o);&#10;&#10;&#10;&#9;// 5] Заблокировать закрытие документа, сделав пометку о наличии не сохранённых данных&#10;&#9;f.s0.txt_delay_save.block();&#10;&#10;&#10;&#9;// 6] Изменить на +1 счётчик ожидающих ответов ajax-запросов&#10;&#9;self.m.s0.ajax_counter(+self.m.s0.ajax_counter() + 1);&#10;&#10;&#10;&#9;// 7. Отправить объект на сервер ajax-запросом&#10;&#9;ajax({&#10;&#9;&#9;method: 'post',&#10;&#9;&#9;headers: {&quot;Content-Type&quot;: &quot;application/json&quot;, &quot;X-CSRF-TOKEN&quot;: server.csrf_token},&#10;&#9;&#9;requestBody: json,&#10;&#9;&#9;params: {self: self, o: o, from: from, callback: callback},&#10;&#10;&#9;&#9;// Обработка OK-ответа с сервера&#10;&#9;&#9;callback: function(xhr, status, event, target, params) {&#10;&#10;&#9;&#9;&#9;// 1. Получить ответ сервера&#10;&#9;&#9;&#9;var data = JSON.parse(xhr.responseText);&#10;&#10;&#9;&#9;&#9;// 2. Изменить на -1 счётчик ожидающих ответов ajax-запросов&#10;&#9;&#9;&#9;self.m.s0.ajax_counter(+self.m.s0.ajax_counter() - 1);&#10;&#10;&#9;&#9;&#9;// 3. Если data.timestamp &lt; self.m.s0.ajax_timers[o.operation], завершить&#10;&#9;&#9;&#9;if(data.timestamp &lt; self.m.s0.ajax_timers[o.operation]) return;&#10;&#10;&#9;&#9;&#9;// 4. Разблокировать закрытие документа, убрав пометку о наличии не сохранённых данных&#10;&#9;&#9;&#9;// - Но только, если m.s0.ajax_counter == 0&#10;&#9;&#9;&#9;if(self.m.s0.ajax_counter() == 0)&#10;&#9;&#9;&#9;&#9;f.s0.txt_delay_save.unblock();&#10;&#10;&#9;&#9;&#9;// 5. Если data.result == 'success'&#10;&#9;&#9;&#9;if(data.result == 'success') {&#10;&#10;&#9;&#9;&#9;&#9;// TODO: написать код - что будет в случае успешного ответа&#10;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;//// 5.1. (пример) Обновить m.s4.images&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//&#9;// 1] Полностью очистить m.s4.images&#10;&#9;&#9;&#9;&#9;//&#9;self.m.s4.images.removeAll();&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//&#9;// 2] Наполнить m.s4.images новыми данными&#10;&#9;&#9;&#9;&#9;//&#9;for(var i=0; i&lt;data.images.length; i++) {&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//&#9;&#9;// 1.2.1] Сформировать объект для добавления&#10;&#9;&#9;&#9;&#9;//&#9;&#9;var obj = {};&#10;&#9;&#9;&#9;&#9;//&#9;&#9;for(var key in data.images[i]) {&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//&#9;&#9;&#9;// Если свойство не своё, пропускаем&#10;&#9;&#9;&#9;&#9;//&#9;&#9;&#9;if(!data.images[i].hasOwnProperty(key)) continue;&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//&#9;&#9;&#9;// Добавим в obj свойство key&#10;&#9;&#9;&#9;&#9;//&#9;&#9;&#9;obj[key] = ko.observable(data.images[i][key]);&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//&#9;&#9;}&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//&#9;&#9;// 1.2.2] Добавить св-во selected&#10;&#9;&#9;&#9;&#9;//&#9;&#9;obj['selected'] = ko.observable(0);&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//&#9;&#9;// 1.2.3] Добавить этот объект в m.s4.images&#10;&#9;&#9;&#9;&#9;//&#9;&#9;self.m.s4.images.push(ko.observable(obj))&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//&#9;}&#10;&#10;&#9;&#9;&#9;&#9;// 5.2. (пример) Выбрать 1-e в m.s4.images изображение&#10;&#9;&#9;&#9;&#9;//self.m.s4.choosen_image((function(){&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//&#9;if(self.m.s4.images().length) return self.m.s4.images()[0]();&#10;&#9;&#9;&#9;&#9;//&#9;else return '';&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//})());&#10;&#10;&#9;&#9;&#9;&#9;// 5.n. Выполнить callback&#10;&#9;&#9;&#9;&#9;if(callback) callback();&#10;&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 5. Если data.result != 'success':&#10;&#9;&#9;&#9;if(data.result == 'fail') {&#10;&#10;&#9;&#9;&#9;&#9;// Вывести информацию об ошибке&#10;&#9;&#9;&#9;&#9;// TODO: указать верное сообщение при ошибке&#10;&#9;&#9;&#9;&#9;console.log('При обновлении изображений произошла ошибка.  Подробнности - в логе.');&#10;&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;},&#10;&#10;&#9;&#9;// Обработка ответа сервера в случае ошибки&#10;&#9;&#9;error_callback: function(xhr, status, event, target) {&#10;&#9;&#9;&#9;console.log(arguments[0].responseText);&#10;&#9;&#9;},&#10;&#10;&#9;&#9;// Обработка ответа сервера в случае таймаута&#10;&#9;&#9;timeout: [200, function(){&#10;&#9;&#9;&#9;console.log(&quot;Ошибка: timeout 200 секунд&quot;);&#10;&#9;&#9;}]&#10;&#9;});&#10;&#10;};" description="Шаблон ajax-функции для обновления данных в клиенте" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSP" value="false" />
    </context>
  </template>
  <template name="delete" value="//------------------------//&#10;// s1.1. Удалить сущность //&#10;//------------------------//&#10;// TODO: изменить имя на актуальное&#10;f.s1.delete = function(data, event) {&#10;&#10;&#9;// 1] Завершить, если функция вызвана не действием пользователя&#10;&#9;// - И не определёнными программами.&#10;&#9;// - А программно, прочими программами.&#10;&#9;if(event)&#10;&#9;&#9;if(!event.originalEvent)&#10;&#9;&#9;&#9;return;&#10;&#10;&#10;&#9;// 2] Применить &quot;механизм отложенного сохранения для текстовых полей&quot;&#10;&#9;// TODO: указать актуальное имя функции&#10;&#9;if(f.s0.txt_delay_save.use(f.s1.delete.bind('', data, event)))&#10;&#9;&#9;return;&#10;&#10;&#10;&#9;// 3] Выполнить специфическую работу&#10;&#10;&#9;&#9;// TODO: сабж&#10;&#10;&#10;&#9;// 4] Подготовить объект в виде json-строки к отправке на сервер&#10;&#10;&#9;&#9;// Подготовить объект&#10;&#9;&#9;var o = {};&#10;&#9;&#9;o.operation = 8;&#9;&#9;&#9;// TODO: указать ID операции&#10;&#9;&#9;o.data = {};&#10;&#10;&#9;&#9;// Подготовить таймер&#10;&#9;&#9;o.data.timestamp = self.m.s0.ajax_timers[o.operation] = Date.now();&#10;&#10;&#9;&#9;// Наполнить объект&#10;&#9;&#9;// TODO: добавить в data данные для отправки на сервер (обычно здесь надо указать ID удаляемой сущности)&#10;&#9;&#9;o.data.id_filter &#9;&#9;&#9;&#9;&#9;&#9;&#9;= data.context.id;&#10;&#9;&#9;o.data.id_group &#9;&#9;&#9;&#9;&#9;&#9;&#9;= self.m.s3.choosen_group().id();&#10;&#10;&#9;&#9;// Получить json-строку&#10;&#9;&#9;var json = ko.toJSON(o);&#10;&#10;&#10;&#9;// 5] Заблокировать закрытие документа, сделав пометку о наличии не сохранённых данных&#10;&#9;f.s0.txt_delay_save.block();&#10;&#10;&#10;&#9;// 6] Показать сообщение&#10;&#9;notify({msg: 'Удаляю...', time: '9999'});&#10;&#10;&#10;&#9;// 7] Изменить на +1 счётчик ожидающих ответов ajax-запросов&#10;&#9;self.m.s0.ajax_counter(+self.m.s0.ajax_counter() + 1);&#10;&#10;&#10;&#9;// 8] Отправить объект на сервер ajax-запросом&#10;&#9;ajax({&#10;&#9;&#9;method: 'post',&#10;&#9;&#9;headers: {&quot;Content-Type&quot;: &quot;application/json&quot;, &quot;X-CSRF-TOKEN&quot;: server.csrf_token},&#10;&#9;&#9;requestBody: json,&#10;&#9;&#9;params: {self: self, o: o},&#10;&#10;&#9;&#9;// Обработка OK-ответа с сервера&#10;&#9;&#9;callback: function(xhr, status, event, target, params) {&#10;&#10;&#9;&#9;&#9;// 1. Получить ответ сервера&#10;&#9;&#9;&#9;var data = JSON.parse(xhr.responseText);&#10;&#10;&#9;&#9;&#9;// 2. Изменить на -1 счётчик ожидающих ответов ajax-запросов&#10;&#9;&#9;&#9;self.m.s0.ajax_counter(+self.m.s0.ajax_counter() - 1);&#10;&#10;&#9;&#9;&#9;// 3. Если data.timestamp &lt; self.m.s0.ajax_timers[o.operation], завершить&#10;&#9;&#9;&#9;if(data.timestamp &lt; self.m.s0.ajax_timers[o.operation]) return;&#10;&#10;&#9;&#9;&#9;// 4. Разблокировать закрытие документа, убрав пометку о наличии не сохранённых данных&#10;&#9;&#9;&#9;// - Но только, если m.s0.ajax_counter == 0&#10;&#9;&#9;&#9;if(self.m.s0.ajax_counter() == 0)&#10;&#9;&#9;&#9;&#9;f.s0.txt_delay_save.unblock();&#10;&#10;&#9;&#9;&#9;// 5. Если data.result == 'success'&#10;&#9;&#9;&#9;if(data.result == 'success') {&#10;&#10;&#9;&#9;&#9;&#9;// TODO: написать код - что будет в случае успешного ответа&#10;&#10;&#9;&#9;&#9;&#9;// (пример)Обновить группы&#10;&#9;&#9;&#9;&#9;//self.f.s0.update_groups('del_filter_from_group', function(){&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//&#9;// Сообщить, об успехе&#10;&#9;&#9;&#9;&#9;//&#9;// - Но только, если m.s0.ajax_counter == 0&#10;&#9;&#9;&#9;&#9;//&#9;if(self.m.s0.ajax_counter() == 0)&#10;&#9;&#9;&#9;&#9;//&#9;&#9;notify({msg: 'Изменения успешно внесены'});&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//}, '', '');&#10;&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 5. Если data.result != 'success':&#10;&#9;&#9;&#9;if(data.result == 'fail') {&#10;&#10;&#9;&#9;&#9;&#9;// Вывести информацию об ошибке&#10;&#9;&#9;&#9;&#9;// TODO: указать верное сообщение при ошибке&#10;&#9;&#9;&#9;&#9;console.log('При обновлении изображений произошла ошибка.  Подробнности - в логе.');&#10;&#10;        // Сообщить о неудаче&#10;        notify({msg: 'Операция закончилась неудачей'});&#10;&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;},&#10;&#10;&#9;&#9;// Обработка ответа сервера в случае ошибки&#10;&#9;&#9;error_callback: function(xhr, status, event, target) {&#10;&#9;&#9;&#9;console.log(arguments[0].responseText);&#10;&#9;&#9;},&#10;&#10;&#9;&#9;// Обработка ответа сервера в случае таймаута&#10;&#9;&#9;timeout: [200, function(){&#10;&#9;&#9;&#9;console.log(&quot;Ошибка: timeout 200 секунд&quot;);&#10;&#9;&#9;}]&#10;&#9;});&#10;&#10;};" description="Шаблон ajax-функции для удаления сущности" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSP" value="false" />
    </context>
  </template>
  <template name="create" value="//------------------------------//&#10;// s1.1. Создать новую сущность //&#10;//------------------------------//&#10;// TODO: изменить имя на актуальное&#9;&#10;f.s1.create = function(data, event) {&#10;&#10;&#9;// 1] Завершить, если функция вызвана не действием пользователя&#10;&#9;// - И не определёнными программами.&#10;&#9;// - А программно, прочими программами.&#10;&#9;if(event)&#10;&#9;&#9;if(!event.originalEvent)&#10;&#9;&#9;&#9;return;&#10;&#10;&#10;&#9;// 2] Применить &quot;механизм отложенного сохранения для текстовых полей&quot;&#10;&#9;// TODO: изменить имя на актуальное&#10;&#9;if(f.s0.txt_delay_save.use(f.s1.create.bind('', data, event)))&#10;&#9;&#9;return;&#10;&#10;&#10;&#9;// 3] Выполнить специфическую работу&#10;&#10;&#9;&#9;// TODO: сабж&#10;&#10;&#10;  // 4] Провести валидацию значений всех свойств&#10;&#10;    // TODO: примеры&#10;  &#10;    //  // 4.1] id&#10;    //  // - Должно быть целым, положительным числом&#10;    //  if(!/^[1-9]+[0-9]*$/i.test(self.m.s1.obj.id())) {&#10;    //    notify({msg: 'Недопустимое значение св-ва id', width: '300'});&#10;    //    return;&#10;    //  }&#10;  &#10;    //  // 4.2] name&#10;    //  // - Должно соответствовать ограничениями на имя/название&#10;    //  if(!/^[-0-9а-яёa-z\/\\_!№@#$&amp;:()\[\]{}*%?&quot;'`., ]*$/i.test(self.m.s1.obj.name())) {&#10;    //    notify({msg: 'Недопустимое значение св-ва name', width: '300'});&#10;    //    return;&#10;    //  }&#10;  &#10;    //  // 4.3] description&#10;    //  // - Должно соответствовать ограничениями на текстовое описание&#10;    //  if(!/^[-0-9а-яёa-z\/\\_!№@#$&amp;:()\[\]{}*%?&quot;'`.,\r\n ]*$/i.test(self.m.s1.obj.description())) {&#10;    //    notify({msg: 'Недопустимое значение св-ва description', width: '350'});&#10;    //    return;&#10;    //  }&#10;&#10;&#10;&#9;// 5] Подготовить объект в виде json-строки к отправке на сервер&#10;&#10;&#9;&#9;// Подготовить объект&#10;&#9;&#9;var o = {};&#10;&#9;&#9;o.operation = 9;&#9;&#9;&#9;// TODO: указать ID операции&#10;&#9;&#9;o.data = {};&#10;&#10;&#9;&#9;// Подготовить таймер&#10;&#9;&#9;o.data.timestamp = self.m.s0.ajax_timers[o.operation] = Date.now();&#10;&#10;&#9;&#9;// Наполнить объект&#10;&#9;&#9;// TODO: добавить в data данные для отправки на сервер (обычно, это данные, которые можно указать при создании)&#10;&#9;&#9;o.data.name &#9;&#9;&#9;&#9;= &#9;self.m.s3.newgroup.name();&#10;&#9;&#9;o.data.description &#9;= &#9;self.m.s3.newgroup.description();&#10;&#10;&#9;&#9;// Получить json-строку&#10;&#9;&#9;var json = ko.toJSON(o);&#10;&#10;&#10;&#9;// 6] Заблокировать закрытие документа, сделав пометку о наличии не сохранённых данных&#10;&#9;f.s0.txt_delay_save.block();&#10;&#10;&#10;&#9;// 7] Показать сообщение&#10;&#9;notify({msg: 'Добавляю...', time: '9999'});&#10;&#10;&#10;&#9;// 8] Изменить на +1 счётчик ожидающих ответов ajax-запросов&#10;&#9;self.m.s0.ajax_counter(+self.m.s0.ajax_counter() + 1);&#10;&#10;&#10;&#9;// 9] Отправить объект на сервер ajax-запросом&#10;&#9;ajax({&#10;&#9;&#9;method: 'post',&#10;&#9;&#9;headers: {&quot;Content-Type&quot;: &quot;application/json&quot;, &quot;X-CSRF-TOKEN&quot;: server.csrf_token},&#10;&#9;&#9;requestBody: json,&#10;&#9;&#9;params: {self: self, o: o},&#10;&#10;&#9;&#9;// Обработка OK-ответа с сервера&#10;&#9;&#9;callback: function(xhr, status, event, target, params) {&#10;&#10;&#9;&#9;&#9;// 1. Получить ответ сервера&#10;&#9;&#9;&#9;var data = JSON.parse(xhr.responseText);&#10;&#10;&#9;&#9;&#9;// 2. Изменить на -1 счётчик ожидающих ответов ajax-запросов&#10;&#9;&#9;&#9;self.m.s0.ajax_counter(+self.m.s0.ajax_counter() - 1);&#10;&#10;&#9;&#9;&#9;// 3. Если data.timestamp &lt; self.m.s0.ajax_timers[o.operation], завершить&#10;&#9;&#9;&#9;if(data.timestamp &lt; self.m.s0.ajax_timers[o.operation]) return;&#10;&#10;&#9;&#9;&#9;// 4. Разблокировать закрытие документа, убрав пометку о наличии не сохранённых данных&#10;&#9;&#9;&#9;// - Но только, если m.s0.ajax_counter == 0&#10;&#9;&#9;&#9;if(self.m.s0.ajax_counter() == 0)&#10;&#9;&#9;&#9;&#9;f.s0.txt_delay_save.unblock();&#10;&#10;&#9;&#9;&#9;// 5. Если data.result == 'success'&#10;&#9;&#9;&#9;if(data.result == 'success') {&#10;&#10;&#9;&#9;&#9;&#9;// TODO: написать код - что будет в случае успешного ответа&#10;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;// (пример) Обновить группы&#10;&#9;&#9;&#9;&#9;//self.f.s0.update_groups('create_new_group', function(){&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//&#9;// Сообщить, об успехе&#10;&#9;&#9;&#9;&#9;//&#9;// - Но только, если m.s0.ajax_counter == 0&#10;&#9;&#9;&#9;&#9;//&#9;if(self.m.s0.ajax_counter() == 0)&#10;&#9;&#9;&#9;&#9;//&#9;&#9;notify({msg: 'Изменения успешно внесены'});&#10;&#9;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;&#9;//}, '', '');&#10;&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// 5. Если data.result != 'success':&#10;&#9;&#9;&#9;if(data.result == 'fail') {&#10;&#10;&#9;&#9;&#9;&#9;// Вывести информацию об ошибке&#10;&#9;&#9;&#9;&#9;// TODO: указать верное сообщение при ошибке&#10;&#9;&#9;&#9;&#9;console.log('При добавлении новой группы произошла ошибка. Подробнности - в логе.');&#10;&#10;        // Сообщить о неудаче&#10;        notify({msg: 'Операция закончилась неудачей'});&#10;&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;},&#10;&#10;&#9;&#9;// Обработка ответа сервера в случае ошибки&#10;&#9;&#9;error_callback: function(xhr, status, event, target) {&#10;&#9;&#9;&#9;console.log(arguments[0].responseText);&#10;&#9;&#9;},&#10;&#10;&#9;&#9;// Обработка ответа сервера в случае таймаута&#10;&#9;&#9;timeout: [200, function(){&#10;&#9;&#9;&#9;console.log(&quot;Ошибка: timeout 200 секунд&quot;);&#10;&#9;&#9;}]&#10;&#9;});&#10;&#10;};" description="Шаблон ajax-функции для создания новой сущности" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSP" value="false" />
    </context>
  </template>
</templateSet>